{"version":3,"sources":["logic/squares.js","logic/StormChess.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["BaseChess","Chess","stormTurns","possibleMoveStyle","background","borderRadius","zappedSquareStyle","opacity","game","stormLevel","gameOver","liveSquares","squares","zappedSquares","turn","game_over","half_moves","numLegalMoves","i","length","moves","in_checkmate","in_stalemate","insufficient_material","square","stormMoves","playableSquares","slice","Math","floor","starter","splice","some","s","piece","get","type","color","baseMoves","verbose","baseMove","includes","to","push","move","sourceSquare","targetSquare","movingSide","promotionLevel","from","promotion","toString","remove","put","removeCount","zap","status","Board","useState","setStatus","position","setPosition","squareStyles","setSquareStyles","orientation","setOrientation","squareStyling","possibleMoves","Object","fromEntries","map","possibleMove","zappedSquare","onMouseOverSquare","onMouseOutSquare","onDrop","fen","onClick","Header","styled","header","Main","main","App","style","display","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53b3302d.chunk.js","sourcesContent":["// The board squares ordered by how soon they get removed\nexport default [\n  \"a1\",\n  \"a2\",\n  \"a3\",\n  \"a4\",\n  \"a5\",\n  \"a6\",\n  \"a7\",\n  \"a8\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"h7\",\n  \"h8\",\n  \"b1\",\n  \"c1\",\n  \"d1\",\n  \"e1\",\n  \"f1\",\n  \"g1\",\n  \"b8\",\n  \"c8\",\n  \"d8\",\n  \"e8\",\n  \"f8\",\n  \"g8\",\n  \"b2\",\n  \"b3\",\n  \"b4\",\n  \"b5\",\n  \"b6\",\n  \"b7\",\n  \"g2\",\n  \"g3\",\n  \"g4\",\n  \"g5\",\n  \"g6\",\n  \"g7\",\n  \"c2\",\n  \"d2\",\n  \"e2\",\n  \"f2\",\n  \"c7\",\n  \"d7\",\n  \"e7\",\n  \"f7\",\n  \"c3\",\n  \"d3\",\n  \"e3\",\n  \"f3\",\n  \"c6\",\n  \"d6\",\n  \"e6\",\n  \"f6\",\n  \"c4\",\n  \"c5\",\n  \"f4\",\n  \"f5\",\n  \"d4\",\n  \"e4\",\n  \"d5\",\n  \"e5\",\n];\n","import Chess from \"chess.js\";\n\nimport squares from \"./squares.js\";\n\nconst BaseChess = new Chess();\n\nexport const stormTurns = [15, 25, 35, 45];\n\nconst StormChess = function () {\n  // Attributes\n  let stormLevel = 0; // Use this to index stormTurns to find the turns at which the next storm will arrive\n  let gameOver = false;\n  let liveSquares = squares;\n  let zappedSquares = [];\n  let turn = 0;\n\n  // Methods\n  function game_over() {\n    // Returns true if the game has ended via checkmate, stalemate, draw, threefold repetition, or insufficient material. Otherwise, returns false. Must be customised because in_checkmate was customised.\n    return (\n      BaseChess.half_moves >= 100 ||\n      in_checkmate() ||\n      BaseChess.in_stalemate() ||\n      BaseChess.insufficient_material()\n    );\n  }\n\n  function in_checkmate() {\n    // Returns true or false if the side to move has been checkmated. Must be customised because the King's legal moves will be different in Storm Chess.\n    let numLegalMoves = 0;\n    for (let i = 0; i < liveSquares.length; i++) {\n      numLegalMoves += moves(liveSquares[i]).length;\n    }\n    return numLegalMoves === 0;\n  }\n\n  function move({ sourceSquare, targetSquare }) {\n    // Attempts to make a move on the board, returning a move object if the move was legal and null if illegal.\n    // Check the number of turns and wipe rows or columns as necessary, then increment stormLevel\n    var movingSide = BaseChess.turn();\n    var promotionLevel = Math.floor(stormLevel / 2);\n    if (moves(sourceSquare).includes(targetSquare)) {\n      BaseChess.move({ from: sourceSquare, to: targetSquare, promotion: \"q\" });\n      turn += 0.5;\n      if (\n        stormLevel > 1 &&\n        (targetSquare.includes((promotionLevel + 1).toString()) ||\n          targetSquare.includes((8 - promotionLevel).toString()))\n      ) {\n        const piece = BaseChess.get(targetSquare);\n        if (piece && piece.type === \"p\") {\n          BaseChess.remove(targetSquare);\n          BaseChess.put({ type: \"q\", color: movingSide }, targetSquare);\n        }\n      }\n      if (stormTurns.includes(turn)) {\n        zap();\n      }\n      gameOver = game_over();\n    }\n  }\n\n  function moves(square) {\n    // Returns a list of legal moves from the selected square.\n    const stormMoves = [];\n    let playableSquares = liveSquares.slice(); // Must copy the liveSquares array by value rather than reference it\n    if (Math.floor(turn) + 1 === stormTurns[stormLevel]) {\n      let starter = 16 - stormLevel * 4;\n      if (stormLevel >= 2) {\n        starter = 20 - stormLevel * 4;\n      }\n      const nonPlayableSquares = playableSquares.splice(0, starter);\n\n      // Then check if King is in the non playable region\n      if (\n        nonPlayableSquares.some((s) => {\n          const piece = BaseChess.get(s);\n          return (\n            piece && piece.type === \"k\" && piece.color === BaseChess.turn()\n          );\n        })\n      ) {\n        const piece = BaseChess.get(square);\n        if (piece && piece.type !== \"k\") {\n          playableSquares = [];\n        }\n      }\n    }\n\n    const baseMoves = BaseChess.moves({ square: square, verbose: true });\n    for (let baseMove of baseMoves) {\n      if (playableSquares.includes(baseMove.to)) {\n        stormMoves.push(baseMove.to);\n      }\n    }\n    return stormMoves;\n  }\n\n  function zap() {\n    let removeCount = 16 - stormLevel * 4;\n    if (stormLevel >= 2) {\n      removeCount = 20 - stormLevel * 4;\n    }\n    for (let i = 0; i < removeCount; i++) {\n      BaseChess.remove(liveSquares[i]);\n    }\n    zappedSquares.push(...liveSquares.splice(0, removeCount));\n    stormLevel += 1;\n  }\n\n  function status() {\n    return {\n      stormLevel: stormLevel,\n      gameOver: gameOver,\n      liveSquares: liveSquares,\n      zappedSquares: zappedSquares,\n      turn: turn,\n    };\n  }\n\n  // Public API\n  return {\n    ...BaseChess,\n    move: move,\n    moves: moves,\n    status: status,\n  };\n};\n\nexport default StormChess;\n","import React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\n\nimport StormChess, { stormTurns } from \"../logic/StormChess\";\n\nconst possibleMoveStyle = {\n  background: \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\n  borderRadius: \"50%\",\n};\n\nconst zappedSquareStyle = {\n  background: \"#003366\",\n  opacity: \"70%\",\n};\n\nconst game = new StormChess();\n\nexport default function Board() {\n  const [status, setStatus] = useState(game.status());\n  const [position, setPosition] = useState(\"start\");\n  const [squareStyles, setSquareStyles] = useState({});\n  const [orientation, setOrientation] = useState(\"white\");\n\n  const squareStyling = ({ possibleMoves }) => {\n    return {\n      ...Object.fromEntries(\n        possibleMoves.map((possibleMove) => [possibleMove, possibleMoveStyle])\n      ),\n      ...Object.fromEntries(\n        status.zappedSquares.map((zappedSquare) => [\n          zappedSquare,\n          zappedSquareStyle,\n        ])\n      ),\n    };\n  };\n\n  const onMouseOverSquare = (square) => {\n    setSquareStyles(\n      squareStyling({\n        possibleMoves: game.moves(square),\n      })\n    );\n  };\n\n  const onMouseOutSquare = () => {\n    setSquareStyles(\n      squareStyling({\n        possibleMoves: [],\n      })\n    );\n  };\n\n  const onDrop = ({ sourceSquare, targetSquare }) => {\n    const move = game.move({\n      sourceSquare: sourceSquare,\n      targetSquare: targetSquare,\n    });\n    if (move === null) return;\n    setPosition(game.fen());\n    setStatus(game.status());\n    setSquareStyles(\n      squareStyling({\n        possibleMoves: [],\n      })\n    );\n  };\n\n  return (\n    <>\n      <Chessboard\n        position={position}\n        squareStyles={squareStyles}\n        onMouseOverSquare={onMouseOverSquare}\n        onMouseOutSquare={onMouseOutSquare}\n        onDrop={onDrop}\n        orientation={orientation}\n      />\n      <div>\n        <p>Turn: {Math.floor(status.turn)}</p>\n        <p>\n          Turns until next storm:{\" \"}\n          {stormTurns[status.stormLevel] - Math.floor(status.turn)}\n        </p>\n        <p>Player to move: {game.turn() === \"b\" ? \"Black\" : \"White\"}</p>\n        <button\n          type=\"button\"\n          onClick={() =>\n            setOrientation(orientation === \"white\" ? \"black\" : \"white\")\n          }\n        >\n          Flip board\n        </button>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Board from \"./components/Board\";\n\nconst Header = styled.header`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: calc(10px + 2vmin);\n  margin: 16px;\n`;\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin: 16px;\n`;\n\nfunction App() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Header>\n        <div>Storm Chess</div>\n      </Header>\n      <Main>\n        <Board />\n      </Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}