{"version":3,"sources":["logic/StormChess.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["BaseChess","Chess","StormChess","in_checkmate","game_over","move","sourceSquare","targetSquare","moves","square","possibleMoveStyle","background","borderRadius","Board","useState","game","squareStyles","setSquareStyles","position","fen","onMouseOverSquare","possibleMoves","Object","fromEntries","map","possibleMove","onMouseOutSquare","onDrop","Header","styled","header","Main","main","App","style","display","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAEMA,EAAY,I,OAAIC,GAkCPC,EA9BI,WASjB,OAAO,2BACFF,GADL,IAEEG,aAAc,WAEZ,OAAO,MAETC,UAAW,WAET,OAAO,MAETC,KAAM,YAA0C,EAA9BC,aAA8B,EAAhBC,aAE9B,OAAO,MAETC,MAAO,SAAUC,GAEf,OAAO,SC1BPC,EAAoB,CACxBC,WAAY,wDACZC,aAAc,OAGD,SAASC,IAAS,IAAD,EACfC,mBAAS,IAAIZ,GAArBa,EADuB,sBAEUD,mBAAS,IAFnB,mBAEvBE,EAFuB,KAETC,EAFS,KAsB9B,OACE,kBAAC,IAAD,CACEC,SAAUH,EAAKI,MACfH,aAAcA,EACdI,kBAtBsB,SAACX,GACzB,IAAMY,EAAgBN,EAAKP,QAC3BS,EACEK,OAAOC,YACLF,EAAcG,KAAI,SAACC,GAAD,MAAkB,CAACA,EAAcf,SAmBrDgB,iBAdqB,WACvBT,EAAgB,KAcdU,OAXW,SAAC,GAAoC,IAAlCrB,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACjBQ,EAAKV,KAAK,CAAEC,eAAcC,oB,4VCxB3C,IAAMqB,EAASC,IAAOC,OAAV,KAQNC,EAAOF,IAAOG,KAAV,KAyBKC,MAlBf,WACE,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,WAGjB,kBAACR,EAAD,KACE,6CAEF,kBAACG,EAAD,KACE,kBAAClB,EAAD,SCnBYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39090f18.chunk.js","sourcesContent":["import Chess from \"chess.js\";\n\nconst BaseChess = new Chess();\n\nconst stormTurns = [15, 25, 35, 45, 55];\n\nconst StormChess = function () {\n  // Private properties shared amongst StormChess methods go here\n  let stormLevel = 0; // Use this to index stormTurns to find the turns at which the next storm will arrive\n\n  // Private methods used in the public methods below go here\n  function getPlayableSquares() {\n    return null;\n  }\n\n  return {\n    ...BaseChess,\n    in_checkmate: function () {\n      // Returns true or false if the side to move has been checkmated. Must be customised because the King's legal moves will be different in Storm Chess.\n      return null;\n    },\n    game_over: function () {\n      // Returns true if the game has ended via checkmate, stalemate, draw, threefold repetition, or insufficient material. Otherwise, returns false. Must be customised because in_checkmate was customised.\n      return null;\n    },\n    move: function ({ sourceSquare, targetSquare }) {\n      // Attempts to make a move on the board, returning a move object if the move was legal and null if illegal.\n      return null;\n    },\n    moves: function (square) {\n      // Returns a list of legal moves from the selected square.\n      return null;\n    },\n  };\n};\n\nexport default StormChess;\n","import React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\n\nimport StormChess from \"../logic/StormChess\";\n\nconst possibleMoveStyle = {\n  background: \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\n  borderRadius: \"50%\",\n};\n\nexport default function Board() {\n  const [game] = useState(new StormChess());\n  const [squareStyles, setSquareStyles] = useState({});\n\n  const onMouseOverSquare = (square) => {\n    const possibleMoves = game.moves();\n    setSquareStyles(\n      Object.fromEntries(\n        possibleMoves.map((possibleMove) => [possibleMove, possibleMoveStyle])\n      )\n    );\n  };\n\n  const onMouseOutSquare = () => {\n    setSquareStyles({});\n  };\n\n  const onDrop = ({ sourceSquare, targetSquare }) => {\n    const move = game.move({ sourceSquare, targetSquare });\n    if (move === null) return;\n  };\n\n  return (\n    <Chessboard\n      position={game.fen()}\n      squareStyles={squareStyles}\n      onMouseOverSquare={onMouseOverSquare}\n      onMouseOutSquare={onMouseOutSquare}\n      onDrop={onDrop}\n    />\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Board from \"./components/Board\";\n\nconst Header = styled.header`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: calc(10px + 2vmin);\n  margin: 16px;\n`;\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 16px;\n`;\n\nfunction App() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Header>\n        <div>Storm Chess</div>\n      </Header>\n      <Main>\n        <Board />\n      </Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}